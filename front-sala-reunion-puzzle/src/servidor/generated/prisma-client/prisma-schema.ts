// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDiagrama {
  count: Int!
}

type AggregateDiagramaUsuario {
  count: Int!
}

type AggregateSala {
  count: Int!
}

type AggregateUsuario {
  count: Int!
}

type AggregateUsuarioSala {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Diagrama {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  datos: String!
  esDiagramaGlobal: Boolean!
  diagramasPorUsuario(where: DiagramaUsuarioWhereInput, orderBy: DiagramaUsuarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiagramaUsuario!]
}

type DiagramaConnection {
  pageInfo: PageInfo!
  edges: [DiagramaEdge]!
  aggregate: AggregateDiagrama!
}

input DiagramaCreateInput {
  id: ID
  datos: String!
  esDiagramaGlobal: Boolean
  diagramasPorUsuario: DiagramaUsuarioCreateManyWithoutDiagramaInput
}

input DiagramaCreateOneWithoutDiagramasPorUsuarioInput {
  create: DiagramaCreateWithoutDiagramasPorUsuarioInput
  connect: DiagramaWhereUniqueInput
}

input DiagramaCreateWithoutDiagramasPorUsuarioInput {
  id: ID
  datos: String!
  esDiagramaGlobal: Boolean
}

type DiagramaEdge {
  node: Diagrama!
  cursor: String!
}

enum DiagramaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  datos_ASC
  datos_DESC
  esDiagramaGlobal_ASC
  esDiagramaGlobal_DESC
}

type DiagramaPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  datos: String!
  esDiagramaGlobal: Boolean!
}

type DiagramaSubscriptionPayload {
  mutation: MutationType!
  node: Diagrama
  updatedFields: [String!]
  previousValues: DiagramaPreviousValues
}

input DiagramaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiagramaWhereInput
  AND: [DiagramaSubscriptionWhereInput!]
  OR: [DiagramaSubscriptionWhereInput!]
  NOT: [DiagramaSubscriptionWhereInput!]
}

input DiagramaUpdateInput {
  datos: String
  esDiagramaGlobal: Boolean
  diagramasPorUsuario: DiagramaUsuarioUpdateManyWithoutDiagramaInput
}

input DiagramaUpdateManyMutationInput {
  datos: String
  esDiagramaGlobal: Boolean
}

input DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput {
  create: DiagramaCreateWithoutDiagramasPorUsuarioInput
  update: DiagramaUpdateWithoutDiagramasPorUsuarioDataInput
  upsert: DiagramaUpsertWithoutDiagramasPorUsuarioInput
  connect: DiagramaWhereUniqueInput
}

input DiagramaUpdateWithoutDiagramasPorUsuarioDataInput {
  datos: String
  esDiagramaGlobal: Boolean
}

input DiagramaUpsertWithoutDiagramasPorUsuarioInput {
  update: DiagramaUpdateWithoutDiagramasPorUsuarioDataInput!
  create: DiagramaCreateWithoutDiagramasPorUsuarioInput!
}

type DiagramaUsuario {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  diagrama: Diagrama!
  sala: Sala!
  usuario: Usuario!
}

type DiagramaUsuarioConnection {
  pageInfo: PageInfo!
  edges: [DiagramaUsuarioEdge]!
  aggregate: AggregateDiagramaUsuario!
}

input DiagramaUsuarioCreateInput {
  id: ID
  diagrama: DiagramaCreateOneWithoutDiagramasPorUsuarioInput!
  sala: SalaCreateOneWithoutDiagramasPorUsuarioInput!
  usuario: UsuarioCreateOneWithoutDiagramasPorUsuarioInput!
}

input DiagramaUsuarioCreateManyWithoutDiagramaInput {
  create: [DiagramaUsuarioCreateWithoutDiagramaInput!]
  connect: [DiagramaUsuarioWhereUniqueInput!]
}

input DiagramaUsuarioCreateManyWithoutSalaInput {
  create: [DiagramaUsuarioCreateWithoutSalaInput!]
  connect: [DiagramaUsuarioWhereUniqueInput!]
}

input DiagramaUsuarioCreateManyWithoutUsuarioInput {
  create: [DiagramaUsuarioCreateWithoutUsuarioInput!]
  connect: [DiagramaUsuarioWhereUniqueInput!]
}

input DiagramaUsuarioCreateWithoutDiagramaInput {
  id: ID
  sala: SalaCreateOneWithoutDiagramasPorUsuarioInput!
  usuario: UsuarioCreateOneWithoutDiagramasPorUsuarioInput!
}

input DiagramaUsuarioCreateWithoutSalaInput {
  id: ID
  diagrama: DiagramaCreateOneWithoutDiagramasPorUsuarioInput!
  usuario: UsuarioCreateOneWithoutDiagramasPorUsuarioInput!
}

input DiagramaUsuarioCreateWithoutUsuarioInput {
  id: ID
  diagrama: DiagramaCreateOneWithoutDiagramasPorUsuarioInput!
  sala: SalaCreateOneWithoutDiagramasPorUsuarioInput!
}

type DiagramaUsuarioEdge {
  node: DiagramaUsuario!
  cursor: String!
}

enum DiagramaUsuarioOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DiagramaUsuarioPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DiagramaUsuarioScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DiagramaUsuarioScalarWhereInput!]
  OR: [DiagramaUsuarioScalarWhereInput!]
  NOT: [DiagramaUsuarioScalarWhereInput!]
}

type DiagramaUsuarioSubscriptionPayload {
  mutation: MutationType!
  node: DiagramaUsuario
  updatedFields: [String!]
  previousValues: DiagramaUsuarioPreviousValues
}

input DiagramaUsuarioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiagramaUsuarioWhereInput
  AND: [DiagramaUsuarioSubscriptionWhereInput!]
  OR: [DiagramaUsuarioSubscriptionWhereInput!]
  NOT: [DiagramaUsuarioSubscriptionWhereInput!]
}

input DiagramaUsuarioUpdateInput {
  diagrama: DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput
  sala: SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput
  usuario: UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput
}

input DiagramaUsuarioUpdateManyWithoutDiagramaInput {
  create: [DiagramaUsuarioCreateWithoutDiagramaInput!]
  delete: [DiagramaUsuarioWhereUniqueInput!]
  connect: [DiagramaUsuarioWhereUniqueInput!]
  set: [DiagramaUsuarioWhereUniqueInput!]
  disconnect: [DiagramaUsuarioWhereUniqueInput!]
  update: [DiagramaUsuarioUpdateWithWhereUniqueWithoutDiagramaInput!]
  upsert: [DiagramaUsuarioUpsertWithWhereUniqueWithoutDiagramaInput!]
  deleteMany: [DiagramaUsuarioScalarWhereInput!]
}

input DiagramaUsuarioUpdateManyWithoutSalaInput {
  create: [DiagramaUsuarioCreateWithoutSalaInput!]
  delete: [DiagramaUsuarioWhereUniqueInput!]
  connect: [DiagramaUsuarioWhereUniqueInput!]
  set: [DiagramaUsuarioWhereUniqueInput!]
  disconnect: [DiagramaUsuarioWhereUniqueInput!]
  update: [DiagramaUsuarioUpdateWithWhereUniqueWithoutSalaInput!]
  upsert: [DiagramaUsuarioUpsertWithWhereUniqueWithoutSalaInput!]
  deleteMany: [DiagramaUsuarioScalarWhereInput!]
}

input DiagramaUsuarioUpdateManyWithoutUsuarioInput {
  create: [DiagramaUsuarioCreateWithoutUsuarioInput!]
  delete: [DiagramaUsuarioWhereUniqueInput!]
  connect: [DiagramaUsuarioWhereUniqueInput!]
  set: [DiagramaUsuarioWhereUniqueInput!]
  disconnect: [DiagramaUsuarioWhereUniqueInput!]
  update: [DiagramaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput!]
  upsert: [DiagramaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput!]
  deleteMany: [DiagramaUsuarioScalarWhereInput!]
}

input DiagramaUsuarioUpdateWithoutDiagramaDataInput {
  sala: SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput
  usuario: UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput
}

input DiagramaUsuarioUpdateWithoutSalaDataInput {
  diagrama: DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput
  usuario: UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput
}

input DiagramaUsuarioUpdateWithoutUsuarioDataInput {
  diagrama: DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput
  sala: SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput
}

input DiagramaUsuarioUpdateWithWhereUniqueWithoutDiagramaInput {
  where: DiagramaUsuarioWhereUniqueInput!
  data: DiagramaUsuarioUpdateWithoutDiagramaDataInput!
}

input DiagramaUsuarioUpdateWithWhereUniqueWithoutSalaInput {
  where: DiagramaUsuarioWhereUniqueInput!
  data: DiagramaUsuarioUpdateWithoutSalaDataInput!
}

input DiagramaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput {
  where: DiagramaUsuarioWhereUniqueInput!
  data: DiagramaUsuarioUpdateWithoutUsuarioDataInput!
}

input DiagramaUsuarioUpsertWithWhereUniqueWithoutDiagramaInput {
  where: DiagramaUsuarioWhereUniqueInput!
  update: DiagramaUsuarioUpdateWithoutDiagramaDataInput!
  create: DiagramaUsuarioCreateWithoutDiagramaInput!
}

input DiagramaUsuarioUpsertWithWhereUniqueWithoutSalaInput {
  where: DiagramaUsuarioWhereUniqueInput!
  update: DiagramaUsuarioUpdateWithoutSalaDataInput!
  create: DiagramaUsuarioCreateWithoutSalaInput!
}

input DiagramaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput {
  where: DiagramaUsuarioWhereUniqueInput!
  update: DiagramaUsuarioUpdateWithoutUsuarioDataInput!
  create: DiagramaUsuarioCreateWithoutUsuarioInput!
}

input DiagramaUsuarioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  diagrama: DiagramaWhereInput
  sala: SalaWhereInput
  usuario: UsuarioWhereInput
  AND: [DiagramaUsuarioWhereInput!]
  OR: [DiagramaUsuarioWhereInput!]
  NOT: [DiagramaUsuarioWhereInput!]
}

input DiagramaUsuarioWhereUniqueInput {
  id: ID
}

input DiagramaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  datos: String
  datos_not: String
  datos_in: [String!]
  datos_not_in: [String!]
  datos_lt: String
  datos_lte: String
  datos_gt: String
  datos_gte: String
  datos_contains: String
  datos_not_contains: String
  datos_starts_with: String
  datos_not_starts_with: String
  datos_ends_with: String
  datos_not_ends_with: String
  esDiagramaGlobal: Boolean
  esDiagramaGlobal_not: Boolean
  diagramasPorUsuario_every: DiagramaUsuarioWhereInput
  diagramasPorUsuario_some: DiagramaUsuarioWhereInput
  diagramasPorUsuario_none: DiagramaUsuarioWhereInput
  AND: [DiagramaWhereInput!]
  OR: [DiagramaWhereInput!]
  NOT: [DiagramaWhereInput!]
}

input DiagramaWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDiagrama(data: DiagramaCreateInput!): Diagrama!
  updateDiagrama(data: DiagramaUpdateInput!, where: DiagramaWhereUniqueInput!): Diagrama
  updateManyDiagramas(data: DiagramaUpdateManyMutationInput!, where: DiagramaWhereInput): BatchPayload!
  upsertDiagrama(where: DiagramaWhereUniqueInput!, create: DiagramaCreateInput!, update: DiagramaUpdateInput!): Diagrama!
  deleteDiagrama(where: DiagramaWhereUniqueInput!): Diagrama
  deleteManyDiagramas(where: DiagramaWhereInput): BatchPayload!
  createDiagramaUsuario(data: DiagramaUsuarioCreateInput!): DiagramaUsuario!
  updateDiagramaUsuario(data: DiagramaUsuarioUpdateInput!, where: DiagramaUsuarioWhereUniqueInput!): DiagramaUsuario
  upsertDiagramaUsuario(where: DiagramaUsuarioWhereUniqueInput!, create: DiagramaUsuarioCreateInput!, update: DiagramaUsuarioUpdateInput!): DiagramaUsuario!
  deleteDiagramaUsuario(where: DiagramaUsuarioWhereUniqueInput!): DiagramaUsuario
  deleteManyDiagramaUsuarios(where: DiagramaUsuarioWhereInput): BatchPayload!
  createSala(data: SalaCreateInput!): Sala!
  updateSala(data: SalaUpdateInput!, where: SalaWhereUniqueInput!): Sala
  updateManySalas(data: SalaUpdateManyMutationInput!, where: SalaWhereInput): BatchPayload!
  upsertSala(where: SalaWhereUniqueInput!, create: SalaCreateInput!, update: SalaUpdateInput!): Sala!
  deleteSala(where: SalaWhereUniqueInput!): Sala
  deleteManySalas(where: SalaWhereInput): BatchPayload!
  createUsuario(data: UsuarioCreateInput!): Usuario!
  updateUsuario(data: UsuarioUpdateInput!, where: UsuarioWhereUniqueInput!): Usuario
  updateManyUsuarios(data: UsuarioUpdateManyMutationInput!, where: UsuarioWhereInput): BatchPayload!
  upsertUsuario(where: UsuarioWhereUniqueInput!, create: UsuarioCreateInput!, update: UsuarioUpdateInput!): Usuario!
  deleteUsuario(where: UsuarioWhereUniqueInput!): Usuario
  deleteManyUsuarios(where: UsuarioWhereInput): BatchPayload!
  createUsuarioSala(data: UsuarioSalaCreateInput!): UsuarioSala!
  updateUsuarioSala(data: UsuarioSalaUpdateInput!, where: UsuarioSalaWhereUniqueInput!): UsuarioSala
  updateManyUsuarioSalas(data: UsuarioSalaUpdateManyMutationInput!, where: UsuarioSalaWhereInput): BatchPayload!
  upsertUsuarioSala(where: UsuarioSalaWhereUniqueInput!, create: UsuarioSalaCreateInput!, update: UsuarioSalaUpdateInput!): UsuarioSala!
  deleteUsuarioSala(where: UsuarioSalaWhereUniqueInput!): UsuarioSala
  deleteManyUsuarioSalas(where: UsuarioSalaWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  diagrama(where: DiagramaWhereUniqueInput!): Diagrama
  diagramas(where: DiagramaWhereInput, orderBy: DiagramaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Diagrama]!
  diagramasConnection(where: DiagramaWhereInput, orderBy: DiagramaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiagramaConnection!
  diagramaUsuario(where: DiagramaUsuarioWhereUniqueInput!): DiagramaUsuario
  diagramaUsuarios(where: DiagramaUsuarioWhereInput, orderBy: DiagramaUsuarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiagramaUsuario]!
  diagramaUsuariosConnection(where: DiagramaUsuarioWhereInput, orderBy: DiagramaUsuarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiagramaUsuarioConnection!
  sala(where: SalaWhereUniqueInput!): Sala
  salas(where: SalaWhereInput, orderBy: SalaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sala]!
  salasConnection(where: SalaWhereInput, orderBy: SalaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SalaConnection!
  usuario(where: UsuarioWhereUniqueInput!): Usuario
  usuarios(where: UsuarioWhereInput, orderBy: UsuarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Usuario]!
  usuariosConnection(where: UsuarioWhereInput, orderBy: UsuarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsuarioConnection!
  usuarioSala(where: UsuarioSalaWhereUniqueInput!): UsuarioSala
  usuarioSalas(where: UsuarioSalaWhereInput, orderBy: UsuarioSalaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsuarioSala]!
  usuarioSalasConnection(where: UsuarioSalaWhereInput, orderBy: UsuarioSalaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsuarioSalaConnection!
  node(id: ID!): Node
}

type Sala {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String!
  descripcion: String
  usuariosEnSala(where: UsuarioSalaWhereInput, orderBy: UsuarioSalaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsuarioSala!]
  diagramasPorUsuario(where: DiagramaUsuarioWhereInput, orderBy: DiagramaUsuarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiagramaUsuario!]
}

type SalaConnection {
  pageInfo: PageInfo!
  edges: [SalaEdge]!
  aggregate: AggregateSala!
}

input SalaCreateInput {
  id: ID
  nombre: String!
  descripcion: String
  usuariosEnSala: UsuarioSalaCreateManyWithoutSalaInput
  diagramasPorUsuario: DiagramaUsuarioCreateManyWithoutSalaInput
}

input SalaCreateOneWithoutDiagramasPorUsuarioInput {
  create: SalaCreateWithoutDiagramasPorUsuarioInput
  connect: SalaWhereUniqueInput
}

input SalaCreateOneWithoutUsuariosEnSalaInput {
  create: SalaCreateWithoutUsuariosEnSalaInput
  connect: SalaWhereUniqueInput
}

input SalaCreateWithoutDiagramasPorUsuarioInput {
  id: ID
  nombre: String!
  descripcion: String
  usuariosEnSala: UsuarioSalaCreateManyWithoutSalaInput
}

input SalaCreateWithoutUsuariosEnSalaInput {
  id: ID
  nombre: String!
  descripcion: String
  diagramasPorUsuario: DiagramaUsuarioCreateManyWithoutSalaInput
}

type SalaEdge {
  node: Sala!
  cursor: String!
}

enum SalaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  nombre_ASC
  nombre_DESC
  descripcion_ASC
  descripcion_DESC
}

type SalaPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String!
  descripcion: String
}

type SalaSubscriptionPayload {
  mutation: MutationType!
  node: Sala
  updatedFields: [String!]
  previousValues: SalaPreviousValues
}

input SalaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SalaWhereInput
  AND: [SalaSubscriptionWhereInput!]
  OR: [SalaSubscriptionWhereInput!]
  NOT: [SalaSubscriptionWhereInput!]
}

input SalaUpdateInput {
  nombre: String
  descripcion: String
  usuariosEnSala: UsuarioSalaUpdateManyWithoutSalaInput
  diagramasPorUsuario: DiagramaUsuarioUpdateManyWithoutSalaInput
}

input SalaUpdateManyMutationInput {
  nombre: String
  descripcion: String
}

input SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput {
  create: SalaCreateWithoutDiagramasPorUsuarioInput
  update: SalaUpdateWithoutDiagramasPorUsuarioDataInput
  upsert: SalaUpsertWithoutDiagramasPorUsuarioInput
  connect: SalaWhereUniqueInput
}

input SalaUpdateOneRequiredWithoutUsuariosEnSalaInput {
  create: SalaCreateWithoutUsuariosEnSalaInput
  update: SalaUpdateWithoutUsuariosEnSalaDataInput
  upsert: SalaUpsertWithoutUsuariosEnSalaInput
  connect: SalaWhereUniqueInput
}

input SalaUpdateWithoutDiagramasPorUsuarioDataInput {
  nombre: String
  descripcion: String
  usuariosEnSala: UsuarioSalaUpdateManyWithoutSalaInput
}

input SalaUpdateWithoutUsuariosEnSalaDataInput {
  nombre: String
  descripcion: String
  diagramasPorUsuario: DiagramaUsuarioUpdateManyWithoutSalaInput
}

input SalaUpsertWithoutDiagramasPorUsuarioInput {
  update: SalaUpdateWithoutDiagramasPorUsuarioDataInput!
  create: SalaCreateWithoutDiagramasPorUsuarioInput!
}

input SalaUpsertWithoutUsuariosEnSalaInput {
  update: SalaUpdateWithoutUsuariosEnSalaDataInput!
  create: SalaCreateWithoutUsuariosEnSalaInput!
}

input SalaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  nombre: String
  nombre_not: String
  nombre_in: [String!]
  nombre_not_in: [String!]
  nombre_lt: String
  nombre_lte: String
  nombre_gt: String
  nombre_gte: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  descripcion: String
  descripcion_not: String
  descripcion_in: [String!]
  descripcion_not_in: [String!]
  descripcion_lt: String
  descripcion_lte: String
  descripcion_gt: String
  descripcion_gte: String
  descripcion_contains: String
  descripcion_not_contains: String
  descripcion_starts_with: String
  descripcion_not_starts_with: String
  descripcion_ends_with: String
  descripcion_not_ends_with: String
  usuariosEnSala_every: UsuarioSalaWhereInput
  usuariosEnSala_some: UsuarioSalaWhereInput
  usuariosEnSala_none: UsuarioSalaWhereInput
  diagramasPorUsuario_every: DiagramaUsuarioWhereInput
  diagramasPorUsuario_some: DiagramaUsuarioWhereInput
  diagramasPorUsuario_none: DiagramaUsuarioWhereInput
  AND: [SalaWhereInput!]
  OR: [SalaWhereInput!]
  NOT: [SalaWhereInput!]
}

input SalaWhereUniqueInput {
  id: ID
}

type Subscription {
  diagrama(where: DiagramaSubscriptionWhereInput): DiagramaSubscriptionPayload
  diagramaUsuario(where: DiagramaUsuarioSubscriptionWhereInput): DiagramaUsuarioSubscriptionPayload
  sala(where: SalaSubscriptionWhereInput): SalaSubscriptionPayload
  usuario(where: UsuarioSubscriptionWhereInput): UsuarioSubscriptionPayload
  usuarioSala(where: UsuarioSalaSubscriptionWhereInput): UsuarioSalaSubscriptionPayload
}

type Usuario {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String!
  password: String
  esAdmin: Boolean!
  usuariosEnSala(where: UsuarioSalaWhereInput, orderBy: UsuarioSalaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsuarioSala!]
  diagramasPorUsuario(where: DiagramaUsuarioWhereInput, orderBy: DiagramaUsuarioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiagramaUsuario!]
}

type UsuarioConnection {
  pageInfo: PageInfo!
  edges: [UsuarioEdge]!
  aggregate: AggregateUsuario!
}

input UsuarioCreateInput {
  id: ID
  nombre: String!
  password: String
  esAdmin: Boolean
  usuariosEnSala: UsuarioSalaCreateManyWithoutUsuarioInput
  diagramasPorUsuario: DiagramaUsuarioCreateManyWithoutUsuarioInput
}

input UsuarioCreateOneWithoutDiagramasPorUsuarioInput {
  create: UsuarioCreateWithoutDiagramasPorUsuarioInput
  connect: UsuarioWhereUniqueInput
}

input UsuarioCreateOneWithoutUsuariosEnSalaInput {
  create: UsuarioCreateWithoutUsuariosEnSalaInput
  connect: UsuarioWhereUniqueInput
}

input UsuarioCreateWithoutDiagramasPorUsuarioInput {
  id: ID
  nombre: String!
  password: String
  esAdmin: Boolean
  usuariosEnSala: UsuarioSalaCreateManyWithoutUsuarioInput
}

input UsuarioCreateWithoutUsuariosEnSalaInput {
  id: ID
  nombre: String!
  password: String
  esAdmin: Boolean
  diagramasPorUsuario: DiagramaUsuarioCreateManyWithoutUsuarioInput
}

type UsuarioEdge {
  node: Usuario!
  cursor: String!
}

enum UsuarioOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  nombre_ASC
  nombre_DESC
  password_ASC
  password_DESC
  esAdmin_ASC
  esAdmin_DESC
}

type UsuarioPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nombre: String!
  password: String
  esAdmin: Boolean!
}

type UsuarioSala {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  levantarMano: Boolean!
  compartirPantalla: Boolean!
  usuario: Usuario
  sala: Sala!
}

type UsuarioSalaConnection {
  pageInfo: PageInfo!
  edges: [UsuarioSalaEdge]!
  aggregate: AggregateUsuarioSala!
}

input UsuarioSalaCreateInput {
  id: ID
  levantarMano: Boolean
  compartirPantalla: Boolean
  usuario: UsuarioCreateOneWithoutUsuariosEnSalaInput
  sala: SalaCreateOneWithoutUsuariosEnSalaInput!
}

input UsuarioSalaCreateManyWithoutSalaInput {
  create: [UsuarioSalaCreateWithoutSalaInput!]
  connect: [UsuarioSalaWhereUniqueInput!]
}

input UsuarioSalaCreateManyWithoutUsuarioInput {
  create: [UsuarioSalaCreateWithoutUsuarioInput!]
  connect: [UsuarioSalaWhereUniqueInput!]
}

input UsuarioSalaCreateWithoutSalaInput {
  id: ID
  levantarMano: Boolean
  compartirPantalla: Boolean
  usuario: UsuarioCreateOneWithoutUsuariosEnSalaInput
}

input UsuarioSalaCreateWithoutUsuarioInput {
  id: ID
  levantarMano: Boolean
  compartirPantalla: Boolean
  sala: SalaCreateOneWithoutUsuariosEnSalaInput!
}

type UsuarioSalaEdge {
  node: UsuarioSala!
  cursor: String!
}

enum UsuarioSalaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  levantarMano_ASC
  levantarMano_DESC
  compartirPantalla_ASC
  compartirPantalla_DESC
}

type UsuarioSalaPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  levantarMano: Boolean!
  compartirPantalla: Boolean!
}

input UsuarioSalaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  levantarMano: Boolean
  levantarMano_not: Boolean
  compartirPantalla: Boolean
  compartirPantalla_not: Boolean
  AND: [UsuarioSalaScalarWhereInput!]
  OR: [UsuarioSalaScalarWhereInput!]
  NOT: [UsuarioSalaScalarWhereInput!]
}

type UsuarioSalaSubscriptionPayload {
  mutation: MutationType!
  node: UsuarioSala
  updatedFields: [String!]
  previousValues: UsuarioSalaPreviousValues
}

input UsuarioSalaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UsuarioSalaWhereInput
  AND: [UsuarioSalaSubscriptionWhereInput!]
  OR: [UsuarioSalaSubscriptionWhereInput!]
  NOT: [UsuarioSalaSubscriptionWhereInput!]
}

input UsuarioSalaUpdateInput {
  levantarMano: Boolean
  compartirPantalla: Boolean
  usuario: UsuarioUpdateOneWithoutUsuariosEnSalaInput
  sala: SalaUpdateOneRequiredWithoutUsuariosEnSalaInput
}

input UsuarioSalaUpdateManyDataInput {
  levantarMano: Boolean
  compartirPantalla: Boolean
}

input UsuarioSalaUpdateManyMutationInput {
  levantarMano: Boolean
  compartirPantalla: Boolean
}

input UsuarioSalaUpdateManyWithoutSalaInput {
  create: [UsuarioSalaCreateWithoutSalaInput!]
  delete: [UsuarioSalaWhereUniqueInput!]
  connect: [UsuarioSalaWhereUniqueInput!]
  set: [UsuarioSalaWhereUniqueInput!]
  disconnect: [UsuarioSalaWhereUniqueInput!]
  update: [UsuarioSalaUpdateWithWhereUniqueWithoutSalaInput!]
  upsert: [UsuarioSalaUpsertWithWhereUniqueWithoutSalaInput!]
  deleteMany: [UsuarioSalaScalarWhereInput!]
  updateMany: [UsuarioSalaUpdateManyWithWhereNestedInput!]
}

input UsuarioSalaUpdateManyWithoutUsuarioInput {
  create: [UsuarioSalaCreateWithoutUsuarioInput!]
  delete: [UsuarioSalaWhereUniqueInput!]
  connect: [UsuarioSalaWhereUniqueInput!]
  set: [UsuarioSalaWhereUniqueInput!]
  disconnect: [UsuarioSalaWhereUniqueInput!]
  update: [UsuarioSalaUpdateWithWhereUniqueWithoutUsuarioInput!]
  upsert: [UsuarioSalaUpsertWithWhereUniqueWithoutUsuarioInput!]
  deleteMany: [UsuarioSalaScalarWhereInput!]
  updateMany: [UsuarioSalaUpdateManyWithWhereNestedInput!]
}

input UsuarioSalaUpdateManyWithWhereNestedInput {
  where: UsuarioSalaScalarWhereInput!
  data: UsuarioSalaUpdateManyDataInput!
}

input UsuarioSalaUpdateWithoutSalaDataInput {
  levantarMano: Boolean
  compartirPantalla: Boolean
  usuario: UsuarioUpdateOneWithoutUsuariosEnSalaInput
}

input UsuarioSalaUpdateWithoutUsuarioDataInput {
  levantarMano: Boolean
  compartirPantalla: Boolean
  sala: SalaUpdateOneRequiredWithoutUsuariosEnSalaInput
}

input UsuarioSalaUpdateWithWhereUniqueWithoutSalaInput {
  where: UsuarioSalaWhereUniqueInput!
  data: UsuarioSalaUpdateWithoutSalaDataInput!
}

input UsuarioSalaUpdateWithWhereUniqueWithoutUsuarioInput {
  where: UsuarioSalaWhereUniqueInput!
  data: UsuarioSalaUpdateWithoutUsuarioDataInput!
}

input UsuarioSalaUpsertWithWhereUniqueWithoutSalaInput {
  where: UsuarioSalaWhereUniqueInput!
  update: UsuarioSalaUpdateWithoutSalaDataInput!
  create: UsuarioSalaCreateWithoutSalaInput!
}

input UsuarioSalaUpsertWithWhereUniqueWithoutUsuarioInput {
  where: UsuarioSalaWhereUniqueInput!
  update: UsuarioSalaUpdateWithoutUsuarioDataInput!
  create: UsuarioSalaCreateWithoutUsuarioInput!
}

input UsuarioSalaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  levantarMano: Boolean
  levantarMano_not: Boolean
  compartirPantalla: Boolean
  compartirPantalla_not: Boolean
  usuario: UsuarioWhereInput
  sala: SalaWhereInput
  AND: [UsuarioSalaWhereInput!]
  OR: [UsuarioSalaWhereInput!]
  NOT: [UsuarioSalaWhereInput!]
}

input UsuarioSalaWhereUniqueInput {
  id: ID
}

type UsuarioSubscriptionPayload {
  mutation: MutationType!
  node: Usuario
  updatedFields: [String!]
  previousValues: UsuarioPreviousValues
}

input UsuarioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UsuarioWhereInput
  AND: [UsuarioSubscriptionWhereInput!]
  OR: [UsuarioSubscriptionWhereInput!]
  NOT: [UsuarioSubscriptionWhereInput!]
}

input UsuarioUpdateInput {
  nombre: String
  password: String
  esAdmin: Boolean
  usuariosEnSala: UsuarioSalaUpdateManyWithoutUsuarioInput
  diagramasPorUsuario: DiagramaUsuarioUpdateManyWithoutUsuarioInput
}

input UsuarioUpdateManyMutationInput {
  nombre: String
  password: String
  esAdmin: Boolean
}

input UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput {
  create: UsuarioCreateWithoutDiagramasPorUsuarioInput
  update: UsuarioUpdateWithoutDiagramasPorUsuarioDataInput
  upsert: UsuarioUpsertWithoutDiagramasPorUsuarioInput
  connect: UsuarioWhereUniqueInput
}

input UsuarioUpdateOneWithoutUsuariosEnSalaInput {
  create: UsuarioCreateWithoutUsuariosEnSalaInput
  update: UsuarioUpdateWithoutUsuariosEnSalaDataInput
  upsert: UsuarioUpsertWithoutUsuariosEnSalaInput
  delete: Boolean
  disconnect: Boolean
  connect: UsuarioWhereUniqueInput
}

input UsuarioUpdateWithoutDiagramasPorUsuarioDataInput {
  nombre: String
  password: String
  esAdmin: Boolean
  usuariosEnSala: UsuarioSalaUpdateManyWithoutUsuarioInput
}

input UsuarioUpdateWithoutUsuariosEnSalaDataInput {
  nombre: String
  password: String
  esAdmin: Boolean
  diagramasPorUsuario: DiagramaUsuarioUpdateManyWithoutUsuarioInput
}

input UsuarioUpsertWithoutDiagramasPorUsuarioInput {
  update: UsuarioUpdateWithoutDiagramasPorUsuarioDataInput!
  create: UsuarioCreateWithoutDiagramasPorUsuarioInput!
}

input UsuarioUpsertWithoutUsuariosEnSalaInput {
  update: UsuarioUpdateWithoutUsuariosEnSalaDataInput!
  create: UsuarioCreateWithoutUsuariosEnSalaInput!
}

input UsuarioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  nombre: String
  nombre_not: String
  nombre_in: [String!]
  nombre_not_in: [String!]
  nombre_lt: String
  nombre_lte: String
  nombre_gt: String
  nombre_gte: String
  nombre_contains: String
  nombre_not_contains: String
  nombre_starts_with: String
  nombre_not_starts_with: String
  nombre_ends_with: String
  nombre_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  esAdmin: Boolean
  esAdmin_not: Boolean
  usuariosEnSala_every: UsuarioSalaWhereInput
  usuariosEnSala_some: UsuarioSalaWhereInput
  usuariosEnSala_none: UsuarioSalaWhereInput
  diagramasPorUsuario_every: DiagramaUsuarioWhereInput
  diagramasPorUsuario_some: DiagramaUsuarioWhereInput
  diagramasPorUsuario_none: DiagramaUsuarioWhereInput
  AND: [UsuarioWhereInput!]
  OR: [UsuarioWhereInput!]
  NOT: [UsuarioWhereInput!]
}

input UsuarioWhereUniqueInput {
  id: ID
}
`