// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  diagrama: (where?: DiagramaWhereInput) => Promise<boolean>;
  diagramaUsuario: (where?: DiagramaUsuarioWhereInput) => Promise<boolean>;
  sala: (where?: SalaWhereInput) => Promise<boolean>;
  usuario: (where?: UsuarioWhereInput) => Promise<boolean>;
  usuarioSala: (where?: UsuarioSalaWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  diagrama: (where: DiagramaWhereUniqueInput) => DiagramaNullablePromise;
  diagramas: (args?: {
    where?: DiagramaWhereInput;
    orderBy?: DiagramaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Diagrama>;
  diagramasConnection: (args?: {
    where?: DiagramaWhereInput;
    orderBy?: DiagramaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DiagramaConnectionPromise;
  diagramaUsuario: (
    where: DiagramaUsuarioWhereUniqueInput
  ) => DiagramaUsuarioNullablePromise;
  diagramaUsuarios: (args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DiagramaUsuario>;
  diagramaUsuariosConnection: (args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DiagramaUsuarioConnectionPromise;
  sala: (where: SalaWhereUniqueInput) => SalaNullablePromise;
  salas: (args?: {
    where?: SalaWhereInput;
    orderBy?: SalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sala>;
  salasConnection: (args?: {
    where?: SalaWhereInput;
    orderBy?: SalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SalaConnectionPromise;
  usuario: (where: UsuarioWhereUniqueInput) => UsuarioNullablePromise;
  usuarios: (args?: {
    where?: UsuarioWhereInput;
    orderBy?: UsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Usuario>;
  usuariosConnection: (args?: {
    where?: UsuarioWhereInput;
    orderBy?: UsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UsuarioConnectionPromise;
  usuarioSala: (
    where: UsuarioSalaWhereUniqueInput
  ) => UsuarioSalaNullablePromise;
  usuarioSalas: (args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UsuarioSala>;
  usuarioSalasConnection: (args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UsuarioSalaConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDiagrama: (data: DiagramaCreateInput) => DiagramaPromise;
  updateDiagrama: (args: {
    data: DiagramaUpdateInput;
    where: DiagramaWhereUniqueInput;
  }) => DiagramaPromise;
  updateManyDiagramas: (args: {
    data: DiagramaUpdateManyMutationInput;
    where?: DiagramaWhereInput;
  }) => BatchPayloadPromise;
  upsertDiagrama: (args: {
    where: DiagramaWhereUniqueInput;
    create: DiagramaCreateInput;
    update: DiagramaUpdateInput;
  }) => DiagramaPromise;
  deleteDiagrama: (where: DiagramaWhereUniqueInput) => DiagramaPromise;
  deleteManyDiagramas: (where?: DiagramaWhereInput) => BatchPayloadPromise;
  createDiagramaUsuario: (
    data: DiagramaUsuarioCreateInput
  ) => DiagramaUsuarioPromise;
  updateDiagramaUsuario: (args: {
    data: DiagramaUsuarioUpdateInput;
    where: DiagramaUsuarioWhereUniqueInput;
  }) => DiagramaUsuarioPromise;
  upsertDiagramaUsuario: (args: {
    where: DiagramaUsuarioWhereUniqueInput;
    create: DiagramaUsuarioCreateInput;
    update: DiagramaUsuarioUpdateInput;
  }) => DiagramaUsuarioPromise;
  deleteDiagramaUsuario: (
    where: DiagramaUsuarioWhereUniqueInput
  ) => DiagramaUsuarioPromise;
  deleteManyDiagramaUsuarios: (
    where?: DiagramaUsuarioWhereInput
  ) => BatchPayloadPromise;
  createSala: (data: SalaCreateInput) => SalaPromise;
  updateSala: (args: {
    data: SalaUpdateInput;
    where: SalaWhereUniqueInput;
  }) => SalaPromise;
  updateManySalas: (args: {
    data: SalaUpdateManyMutationInput;
    where?: SalaWhereInput;
  }) => BatchPayloadPromise;
  upsertSala: (args: {
    where: SalaWhereUniqueInput;
    create: SalaCreateInput;
    update: SalaUpdateInput;
  }) => SalaPromise;
  deleteSala: (where: SalaWhereUniqueInput) => SalaPromise;
  deleteManySalas: (where?: SalaWhereInput) => BatchPayloadPromise;
  createUsuario: (data: UsuarioCreateInput) => UsuarioPromise;
  updateUsuario: (args: {
    data: UsuarioUpdateInput;
    where: UsuarioWhereUniqueInput;
  }) => UsuarioPromise;
  updateManyUsuarios: (args: {
    data: UsuarioUpdateManyMutationInput;
    where?: UsuarioWhereInput;
  }) => BatchPayloadPromise;
  upsertUsuario: (args: {
    where: UsuarioWhereUniqueInput;
    create: UsuarioCreateInput;
    update: UsuarioUpdateInput;
  }) => UsuarioPromise;
  deleteUsuario: (where: UsuarioWhereUniqueInput) => UsuarioPromise;
  deleteManyUsuarios: (where?: UsuarioWhereInput) => BatchPayloadPromise;
  createUsuarioSala: (data: UsuarioSalaCreateInput) => UsuarioSalaPromise;
  updateUsuarioSala: (args: {
    data: UsuarioSalaUpdateInput;
    where: UsuarioSalaWhereUniqueInput;
  }) => UsuarioSalaPromise;
  updateManyUsuarioSalas: (args: {
    data: UsuarioSalaUpdateManyMutationInput;
    where?: UsuarioSalaWhereInput;
  }) => BatchPayloadPromise;
  upsertUsuarioSala: (args: {
    where: UsuarioSalaWhereUniqueInput;
    create: UsuarioSalaCreateInput;
    update: UsuarioSalaUpdateInput;
  }) => UsuarioSalaPromise;
  deleteUsuarioSala: (where: UsuarioSalaWhereUniqueInput) => UsuarioSalaPromise;
  deleteManyUsuarioSalas: (
    where?: UsuarioSalaWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  diagrama: (
    where?: DiagramaSubscriptionWhereInput
  ) => DiagramaSubscriptionPayloadSubscription;
  diagramaUsuario: (
    where?: DiagramaUsuarioSubscriptionWhereInput
  ) => DiagramaUsuarioSubscriptionPayloadSubscription;
  sala: (
    where?: SalaSubscriptionWhereInput
  ) => SalaSubscriptionPayloadSubscription;
  usuario: (
    where?: UsuarioSubscriptionWhereInput
  ) => UsuarioSubscriptionPayloadSubscription;
  usuarioSala: (
    where?: UsuarioSalaSubscriptionWhereInput
  ) => UsuarioSalaSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DiagramaUsuarioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UsuarioSalaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "levantarMano_ASC"
  | "levantarMano_DESC"
  | "compartirPantalla_ASC"
  | "compartirPantalla_DESC";

export type DiagramaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "datos_ASC"
  | "datos_DESC";

export type SalaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "nombre_ASC"
  | "nombre_DESC";

export type UsuarioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "esAdmin_ASC"
  | "esAdmin_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DiagramaUsuarioUpdateWithoutDiagramaDataInput {
  sala?: Maybe<SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
  usuario?: Maybe<UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
}

export type DiagramaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UsuarioSalaUpdateWithWhereUniqueWithoutSalaInput {
  where: UsuarioSalaWhereUniqueInput;
  data: UsuarioSalaUpdateWithoutSalaDataInput;
}

export interface UsuarioSalaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  levantarMano?: Maybe<Boolean>;
  levantarMano_not?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  compartirPantalla_not?: Maybe<Boolean>;
  usuario?: Maybe<UsuarioWhereInput>;
  sala?: Maybe<SalaWhereInput>;
  AND?: Maybe<UsuarioSalaWhereInput[] | UsuarioSalaWhereInput>;
  OR?: Maybe<UsuarioSalaWhereInput[] | UsuarioSalaWhereInput>;
  NOT?: Maybe<UsuarioSalaWhereInput[] | UsuarioSalaWhereInput>;
}

export interface UsuarioSalaUpdateWithoutSalaDataInput {
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  usuario?: Maybe<UsuarioUpdateOneRequiredWithoutUsuariosEnSalaInput>;
}

export interface UsuarioWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  nombre?: Maybe<String>;
  nombre_not?: Maybe<String>;
  nombre_in?: Maybe<String[] | String>;
  nombre_not_in?: Maybe<String[] | String>;
  nombre_lt?: Maybe<String>;
  nombre_lte?: Maybe<String>;
  nombre_gt?: Maybe<String>;
  nombre_gte?: Maybe<String>;
  nombre_contains?: Maybe<String>;
  nombre_not_contains?: Maybe<String>;
  nombre_starts_with?: Maybe<String>;
  nombre_not_starts_with?: Maybe<String>;
  nombre_ends_with?: Maybe<String>;
  nombre_not_ends_with?: Maybe<String>;
  esAdmin?: Maybe<Boolean>;
  esAdmin_not?: Maybe<Boolean>;
  usuariosEnSala_every?: Maybe<UsuarioSalaWhereInput>;
  usuariosEnSala_some?: Maybe<UsuarioSalaWhereInput>;
  usuariosEnSala_none?: Maybe<UsuarioSalaWhereInput>;
  diagramasPorUsuario_every?: Maybe<DiagramaUsuarioWhereInput>;
  diagramasPorUsuario_some?: Maybe<DiagramaUsuarioWhereInput>;
  diagramasPorUsuario_none?: Maybe<DiagramaUsuarioWhereInput>;
  AND?: Maybe<UsuarioWhereInput[] | UsuarioWhereInput>;
  OR?: Maybe<UsuarioWhereInput[] | UsuarioWhereInput>;
  NOT?: Maybe<UsuarioWhereInput[] | UsuarioWhereInput>;
}

export interface DiagramaCreateWithoutDiagramasPorUsuarioInput {
  id?: Maybe<ID_Input>;
  datos: String;
}

export interface DiagramaUsuarioUpdateManyWithoutSalaInput {
  create?: Maybe<
    | DiagramaUsuarioCreateWithoutSalaInput[]
    | DiagramaUsuarioCreateWithoutSalaInput
  >;
  delete?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  connect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  set?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  disconnect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  update?: Maybe<
    | DiagramaUsuarioUpdateWithWhereUniqueWithoutSalaInput[]
    | DiagramaUsuarioUpdateWithWhereUniqueWithoutSalaInput
  >;
  upsert?: Maybe<
    | DiagramaUsuarioUpsertWithWhereUniqueWithoutSalaInput[]
    | DiagramaUsuarioUpsertWithWhereUniqueWithoutSalaInput
  >;
  deleteMany?: Maybe<
    DiagramaUsuarioScalarWhereInput[] | DiagramaUsuarioScalarWhereInput
  >;
}

export interface UsuarioCreateOneWithoutDiagramasPorUsuarioInput {
  create?: Maybe<UsuarioCreateWithoutDiagramasPorUsuarioInput>;
  connect?: Maybe<UsuarioWhereUniqueInput>;
}

export interface UsuarioUpdateOneRequiredWithoutUsuariosEnSalaInput {
  create?: Maybe<UsuarioCreateWithoutUsuariosEnSalaInput>;
  update?: Maybe<UsuarioUpdateWithoutUsuariosEnSalaDataInput>;
  upsert?: Maybe<UsuarioUpsertWithoutUsuariosEnSalaInput>;
  connect?: Maybe<UsuarioWhereUniqueInput>;
}

export interface UsuarioCreateWithoutDiagramasPorUsuarioInput {
  id?: Maybe<ID_Input>;
  nombre: String;
  esAdmin?: Maybe<Boolean>;
  usuariosEnSala?: Maybe<UsuarioSalaCreateManyWithoutUsuarioInput>;
}

export interface DiagramaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  datos?: Maybe<String>;
  datos_not?: Maybe<String>;
  datos_in?: Maybe<String[] | String>;
  datos_not_in?: Maybe<String[] | String>;
  datos_lt?: Maybe<String>;
  datos_lte?: Maybe<String>;
  datos_gt?: Maybe<String>;
  datos_gte?: Maybe<String>;
  datos_contains?: Maybe<String>;
  datos_not_contains?: Maybe<String>;
  datos_starts_with?: Maybe<String>;
  datos_not_starts_with?: Maybe<String>;
  datos_ends_with?: Maybe<String>;
  datos_not_ends_with?: Maybe<String>;
  diagramasPorUsuario_every?: Maybe<DiagramaUsuarioWhereInput>;
  diagramasPorUsuario_some?: Maybe<DiagramaUsuarioWhereInput>;
  diagramasPorUsuario_none?: Maybe<DiagramaUsuarioWhereInput>;
  AND?: Maybe<DiagramaWhereInput[] | DiagramaWhereInput>;
  OR?: Maybe<DiagramaWhereInput[] | DiagramaWhereInput>;
  NOT?: Maybe<DiagramaWhereInput[] | DiagramaWhereInput>;
}

export interface UsuarioSalaCreateManyWithoutUsuarioInput {
  create?: Maybe<
    | UsuarioSalaCreateWithoutUsuarioInput[]
    | UsuarioSalaCreateWithoutUsuarioInput
  >;
  connect?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
}

export interface SalaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SalaWhereInput>;
  AND?: Maybe<SalaSubscriptionWhereInput[] | SalaSubscriptionWhereInput>;
  OR?: Maybe<SalaSubscriptionWhereInput[] | SalaSubscriptionWhereInput>;
  NOT?: Maybe<SalaSubscriptionWhereInput[] | SalaSubscriptionWhereInput>;
}

export interface UsuarioSalaCreateWithoutUsuarioInput {
  id?: Maybe<ID_Input>;
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  sala: SalaCreateOneWithoutUsuariosEnSalaInput;
}

export interface DiagramaUsuarioSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DiagramaUsuarioWhereInput>;
  AND?: Maybe<
    | DiagramaUsuarioSubscriptionWhereInput[]
    | DiagramaUsuarioSubscriptionWhereInput
  >;
  OR?: Maybe<
    | DiagramaUsuarioSubscriptionWhereInput[]
    | DiagramaUsuarioSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | DiagramaUsuarioSubscriptionWhereInput[]
    | DiagramaUsuarioSubscriptionWhereInput
  >;
}

export interface SalaCreateOneWithoutUsuariosEnSalaInput {
  create?: Maybe<SalaCreateWithoutUsuariosEnSalaInput>;
  connect?: Maybe<SalaWhereUniqueInput>;
}

export interface UsuarioSalaUpdateManyMutationInput {
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
}

export interface SalaCreateWithoutUsuariosEnSalaInput {
  id?: Maybe<ID_Input>;
  nombre: String;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioCreateManyWithoutSalaInput>;
}

export type DiagramaUsuarioWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DiagramaUsuarioCreateManyWithoutSalaInput {
  create?: Maybe<
    | DiagramaUsuarioCreateWithoutSalaInput[]
    | DiagramaUsuarioCreateWithoutSalaInput
  >;
  connect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
}

export interface UsuarioUpdateManyMutationInput {
  nombre?: Maybe<String>;
  esAdmin?: Maybe<Boolean>;
}

export interface DiagramaUsuarioCreateWithoutSalaInput {
  id?: Maybe<ID_Input>;
  diagrama: DiagramaCreateOneWithoutDiagramasPorUsuarioInput;
  usuario: UsuarioCreateOneWithoutDiagramasPorUsuarioInput;
}

export type SalaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DiagramaUpdateInput {
  datos?: Maybe<String>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioUpdateManyWithoutDiagramaInput>;
}

export interface SalaUpdateManyMutationInput {
  nombre?: Maybe<String>;
}

export interface DiagramaUsuarioUpdateManyWithoutDiagramaInput {
  create?: Maybe<
    | DiagramaUsuarioCreateWithoutDiagramaInput[]
    | DiagramaUsuarioCreateWithoutDiagramaInput
  >;
  delete?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  connect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  set?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  disconnect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  update?: Maybe<
    | DiagramaUsuarioUpdateWithWhereUniqueWithoutDiagramaInput[]
    | DiagramaUsuarioUpdateWithWhereUniqueWithoutDiagramaInput
  >;
  upsert?: Maybe<
    | DiagramaUsuarioUpsertWithWhereUniqueWithoutDiagramaInput[]
    | DiagramaUsuarioUpsertWithWhereUniqueWithoutDiagramaInput
  >;
  deleteMany?: Maybe<
    DiagramaUsuarioScalarWhereInput[] | DiagramaUsuarioScalarWhereInput
  >;
}

export interface SalaCreateInput {
  id?: Maybe<ID_Input>;
  nombre: String;
  usuariosEnSala?: Maybe<UsuarioSalaCreateManyWithoutSalaInput>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioCreateManyWithoutSalaInput>;
}

export interface DiagramaUsuarioUpdateWithWhereUniqueWithoutDiagramaInput {
  where: DiagramaUsuarioWhereUniqueInput;
  data: DiagramaUsuarioUpdateWithoutDiagramaDataInput;
}

export interface DiagramaUsuarioUpdateInput {
  diagrama?: Maybe<DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
  sala?: Maybe<SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
  usuario?: Maybe<UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
}

export interface DiagramaUsuarioUpsertWithWhereUniqueWithoutSalaInput {
  where: DiagramaUsuarioWhereUniqueInput;
  update: DiagramaUsuarioUpdateWithoutSalaDataInput;
  create: DiagramaUsuarioCreateWithoutSalaInput;
}

export interface DiagramaUpdateManyMutationInput {
  datos?: Maybe<String>;
}

export interface SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput {
  create?: Maybe<SalaCreateWithoutDiagramasPorUsuarioInput>;
  update?: Maybe<SalaUpdateWithoutDiagramasPorUsuarioDataInput>;
  upsert?: Maybe<SalaUpsertWithoutDiagramasPorUsuarioInput>;
  connect?: Maybe<SalaWhereUniqueInput>;
}

export type UsuarioSalaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SalaUpdateWithoutDiagramasPorUsuarioDataInput {
  nombre?: Maybe<String>;
  usuariosEnSala?: Maybe<UsuarioSalaUpdateManyWithoutSalaInput>;
}

export interface UsuarioSalaUpsertWithWhereUniqueWithoutUsuarioInput {
  where: UsuarioSalaWhereUniqueInput;
  update: UsuarioSalaUpdateWithoutUsuarioDataInput;
  create: UsuarioSalaCreateWithoutUsuarioInput;
}

export interface UsuarioSalaUpdateManyWithoutSalaInput {
  create?: Maybe<
    UsuarioSalaCreateWithoutSalaInput[] | UsuarioSalaCreateWithoutSalaInput
  >;
  delete?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
  connect?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
  set?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
  disconnect?: Maybe<
    UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput
  >;
  update?: Maybe<
    | UsuarioSalaUpdateWithWhereUniqueWithoutSalaInput[]
    | UsuarioSalaUpdateWithWhereUniqueWithoutSalaInput
  >;
  upsert?: Maybe<
    | UsuarioSalaUpsertWithWhereUniqueWithoutSalaInput[]
    | UsuarioSalaUpsertWithWhereUniqueWithoutSalaInput
  >;
  deleteMany?: Maybe<
    UsuarioSalaScalarWhereInput[] | UsuarioSalaScalarWhereInput
  >;
  updateMany?: Maybe<
    | UsuarioSalaUpdateManyWithWhereNestedInput[]
    | UsuarioSalaUpdateManyWithWhereNestedInput
  >;
}

export interface DiagramaUsuarioCreateManyWithoutDiagramaInput {
  create?: Maybe<
    | DiagramaUsuarioCreateWithoutDiagramaInput[]
    | DiagramaUsuarioCreateWithoutDiagramaInput
  >;
  connect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
}

export interface DiagramaUsuarioUpdateWithoutSalaDataInput {
  diagrama?: Maybe<DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
  usuario?: Maybe<UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
}

export interface SalaCreateOneWithoutDiagramasPorUsuarioInput {
  create?: Maybe<SalaCreateWithoutDiagramasPorUsuarioInput>;
  connect?: Maybe<SalaWhereUniqueInput>;
}

export interface SalaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  nombre?: Maybe<String>;
  nombre_not?: Maybe<String>;
  nombre_in?: Maybe<String[] | String>;
  nombre_not_in?: Maybe<String[] | String>;
  nombre_lt?: Maybe<String>;
  nombre_lte?: Maybe<String>;
  nombre_gt?: Maybe<String>;
  nombre_gte?: Maybe<String>;
  nombre_contains?: Maybe<String>;
  nombre_not_contains?: Maybe<String>;
  nombre_starts_with?: Maybe<String>;
  nombre_not_starts_with?: Maybe<String>;
  nombre_ends_with?: Maybe<String>;
  nombre_not_ends_with?: Maybe<String>;
  usuariosEnSala_every?: Maybe<UsuarioSalaWhereInput>;
  usuariosEnSala_some?: Maybe<UsuarioSalaWhereInput>;
  usuariosEnSala_none?: Maybe<UsuarioSalaWhereInput>;
  diagramasPorUsuario_every?: Maybe<DiagramaUsuarioWhereInput>;
  diagramasPorUsuario_some?: Maybe<DiagramaUsuarioWhereInput>;
  diagramasPorUsuario_none?: Maybe<DiagramaUsuarioWhereInput>;
  AND?: Maybe<SalaWhereInput[] | SalaWhereInput>;
  OR?: Maybe<SalaWhereInput[] | SalaWhereInput>;
  NOT?: Maybe<SalaWhereInput[] | SalaWhereInput>;
}

export interface UsuarioSalaCreateManyWithoutSalaInput {
  create?: Maybe<
    UsuarioSalaCreateWithoutSalaInput[] | UsuarioSalaCreateWithoutSalaInput
  >;
  connect?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
}

export interface DiagramaUsuarioUpdateWithWhereUniqueWithoutSalaInput {
  where: DiagramaUsuarioWhereUniqueInput;
  data: DiagramaUsuarioUpdateWithoutSalaDataInput;
}

export interface UsuarioCreateOneWithoutUsuariosEnSalaInput {
  create?: Maybe<UsuarioCreateWithoutUsuariosEnSalaInput>;
  connect?: Maybe<UsuarioWhereUniqueInput>;
}

export interface UsuarioUpdateWithoutUsuariosEnSalaDataInput {
  nombre?: Maybe<String>;
  esAdmin?: Maybe<Boolean>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioUpdateManyWithoutUsuarioInput>;
}

export interface DiagramaUsuarioCreateManyWithoutUsuarioInput {
  create?: Maybe<
    | DiagramaUsuarioCreateWithoutUsuarioInput[]
    | DiagramaUsuarioCreateWithoutUsuarioInput
  >;
  connect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
}

export interface DiagramaUsuarioUpdateManyWithoutUsuarioInput {
  create?: Maybe<
    | DiagramaUsuarioCreateWithoutUsuarioInput[]
    | DiagramaUsuarioCreateWithoutUsuarioInput
  >;
  delete?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  connect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  set?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  disconnect?: Maybe<
    DiagramaUsuarioWhereUniqueInput[] | DiagramaUsuarioWhereUniqueInput
  >;
  update?: Maybe<
    | DiagramaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput[]
    | DiagramaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput
  >;
  upsert?: Maybe<
    | DiagramaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput[]
    | DiagramaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput
  >;
  deleteMany?: Maybe<
    DiagramaUsuarioScalarWhereInput[] | DiagramaUsuarioScalarWhereInput
  >;
}

export interface DiagramaCreateOneWithoutDiagramasPorUsuarioInput {
  create?: Maybe<DiagramaCreateWithoutDiagramasPorUsuarioInput>;
  connect?: Maybe<DiagramaWhereUniqueInput>;
}

export interface DiagramaUsuarioUpdateWithWhereUniqueWithoutUsuarioInput {
  where: DiagramaUsuarioWhereUniqueInput;
  data: DiagramaUsuarioUpdateWithoutUsuarioDataInput;
}

export interface UsuarioSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UsuarioWhereInput>;
  AND?: Maybe<UsuarioSubscriptionWhereInput[] | UsuarioSubscriptionWhereInput>;
  OR?: Maybe<UsuarioSubscriptionWhereInput[] | UsuarioSubscriptionWhereInput>;
  NOT?: Maybe<UsuarioSubscriptionWhereInput[] | UsuarioSubscriptionWhereInput>;
}

export interface DiagramaUsuarioUpdateWithoutUsuarioDataInput {
  diagrama?: Maybe<DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
  sala?: Maybe<SalaUpdateOneRequiredWithoutDiagramasPorUsuarioInput>;
}

export interface DiagramaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DiagramaWhereInput>;
  AND?: Maybe<
    DiagramaSubscriptionWhereInput[] | DiagramaSubscriptionWhereInput
  >;
  OR?: Maybe<DiagramaSubscriptionWhereInput[] | DiagramaSubscriptionWhereInput>;
  NOT?: Maybe<
    DiagramaSubscriptionWhereInput[] | DiagramaSubscriptionWhereInput
  >;
}

export interface DiagramaUpdateOneRequiredWithoutDiagramasPorUsuarioInput {
  create?: Maybe<DiagramaCreateWithoutDiagramasPorUsuarioInput>;
  update?: Maybe<DiagramaUpdateWithoutDiagramasPorUsuarioDataInput>;
  upsert?: Maybe<DiagramaUpsertWithoutDiagramasPorUsuarioInput>;
  connect?: Maybe<DiagramaWhereUniqueInput>;
}

export interface UsuarioSalaCreateInput {
  id?: Maybe<ID_Input>;
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  usuario: UsuarioCreateOneWithoutUsuariosEnSalaInput;
  sala: SalaCreateOneWithoutUsuariosEnSalaInput;
}

export interface DiagramaUpdateWithoutDiagramasPorUsuarioDataInput {
  datos?: Maybe<String>;
}

export interface UsuarioCreateInput {
  id?: Maybe<ID_Input>;
  nombre: String;
  esAdmin?: Maybe<Boolean>;
  usuariosEnSala?: Maybe<UsuarioSalaCreateManyWithoutUsuarioInput>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioCreateManyWithoutUsuarioInput>;
}

export interface DiagramaUpsertWithoutDiagramasPorUsuarioInput {
  update: DiagramaUpdateWithoutDiagramasPorUsuarioDataInput;
  create: DiagramaCreateWithoutDiagramasPorUsuarioInput;
}

export type UsuarioWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DiagramaUsuarioUpsertWithWhereUniqueWithoutUsuarioInput {
  where: DiagramaUsuarioWhereUniqueInput;
  update: DiagramaUsuarioUpdateWithoutUsuarioDataInput;
  create: DiagramaUsuarioCreateWithoutUsuarioInput;
}

export interface DiagramaUsuarioUpsertWithWhereUniqueWithoutDiagramaInput {
  where: DiagramaUsuarioWhereUniqueInput;
  update: DiagramaUsuarioUpdateWithoutDiagramaDataInput;
  create: DiagramaUsuarioCreateWithoutDiagramaInput;
}

export interface DiagramaUsuarioScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    DiagramaUsuarioScalarWhereInput[] | DiagramaUsuarioScalarWhereInput
  >;
  OR?: Maybe<
    DiagramaUsuarioScalarWhereInput[] | DiagramaUsuarioScalarWhereInput
  >;
  NOT?: Maybe<
    DiagramaUsuarioScalarWhereInput[] | DiagramaUsuarioScalarWhereInput
  >;
}

export interface SalaUpsertWithoutUsuariosEnSalaInput {
  update: SalaUpdateWithoutUsuariosEnSalaDataInput;
  create: SalaCreateWithoutUsuariosEnSalaInput;
}

export interface UsuarioUpsertWithoutUsuariosEnSalaInput {
  update: UsuarioUpdateWithoutUsuariosEnSalaDataInput;
  create: UsuarioCreateWithoutUsuariosEnSalaInput;
}

export interface DiagramaUsuarioCreateWithoutDiagramaInput {
  id?: Maybe<ID_Input>;
  sala: SalaCreateOneWithoutDiagramasPorUsuarioInput;
  usuario: UsuarioCreateOneWithoutDiagramasPorUsuarioInput;
}

export interface UsuarioSalaUpsertWithWhereUniqueWithoutSalaInput {
  where: UsuarioSalaWhereUniqueInput;
  update: UsuarioSalaUpdateWithoutSalaDataInput;
  create: UsuarioSalaCreateWithoutSalaInput;
}

export interface UsuarioSalaCreateWithoutSalaInput {
  id?: Maybe<ID_Input>;
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  usuario: UsuarioCreateOneWithoutUsuariosEnSalaInput;
}

export interface UsuarioSalaScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  levantarMano?: Maybe<Boolean>;
  levantarMano_not?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  compartirPantalla_not?: Maybe<Boolean>;
  AND?: Maybe<UsuarioSalaScalarWhereInput[] | UsuarioSalaScalarWhereInput>;
  OR?: Maybe<UsuarioSalaScalarWhereInput[] | UsuarioSalaScalarWhereInput>;
  NOT?: Maybe<UsuarioSalaScalarWhereInput[] | UsuarioSalaScalarWhereInput>;
}

export interface DiagramaUsuarioCreateWithoutUsuarioInput {
  id?: Maybe<ID_Input>;
  diagrama: DiagramaCreateOneWithoutDiagramasPorUsuarioInput;
  sala: SalaCreateOneWithoutDiagramasPorUsuarioInput;
}

export interface UsuarioSalaUpdateManyWithWhereNestedInput {
  where: UsuarioSalaScalarWhereInput;
  data: UsuarioSalaUpdateManyDataInput;
}

export interface DiagramaUsuarioWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  diagrama?: Maybe<DiagramaWhereInput>;
  sala?: Maybe<SalaWhereInput>;
  usuario?: Maybe<UsuarioWhereInput>;
  AND?: Maybe<DiagramaUsuarioWhereInput[] | DiagramaUsuarioWhereInput>;
  OR?: Maybe<DiagramaUsuarioWhereInput[] | DiagramaUsuarioWhereInput>;
  NOT?: Maybe<DiagramaUsuarioWhereInput[] | DiagramaUsuarioWhereInput>;
}

export interface UsuarioSalaUpdateManyDataInput {
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
}

export interface UsuarioUpdateInput {
  nombre?: Maybe<String>;
  esAdmin?: Maybe<Boolean>;
  usuariosEnSala?: Maybe<UsuarioSalaUpdateManyWithoutUsuarioInput>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioUpdateManyWithoutUsuarioInput>;
}

export interface SalaUpsertWithoutDiagramasPorUsuarioInput {
  update: SalaUpdateWithoutDiagramasPorUsuarioDataInput;
  create: SalaCreateWithoutDiagramasPorUsuarioInput;
}

export interface DiagramaUsuarioCreateInput {
  id?: Maybe<ID_Input>;
  diagrama: DiagramaCreateOneWithoutDiagramasPorUsuarioInput;
  sala: SalaCreateOneWithoutDiagramasPorUsuarioInput;
  usuario: UsuarioCreateOneWithoutDiagramasPorUsuarioInput;
}

export interface UsuarioUpdateOneRequiredWithoutDiagramasPorUsuarioInput {
  create?: Maybe<UsuarioCreateWithoutDiagramasPorUsuarioInput>;
  update?: Maybe<UsuarioUpdateWithoutDiagramasPorUsuarioDataInput>;
  upsert?: Maybe<UsuarioUpsertWithoutDiagramasPorUsuarioInput>;
  connect?: Maybe<UsuarioWhereUniqueInput>;
}

export interface DiagramaCreateInput {
  id?: Maybe<ID_Input>;
  datos: String;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioCreateManyWithoutDiagramaInput>;
}

export interface UsuarioUpdateWithoutDiagramasPorUsuarioDataInput {
  nombre?: Maybe<String>;
  esAdmin?: Maybe<Boolean>;
  usuariosEnSala?: Maybe<UsuarioSalaUpdateManyWithoutUsuarioInput>;
}

export interface UsuarioCreateWithoutUsuariosEnSalaInput {
  id?: Maybe<ID_Input>;
  nombre: String;
  esAdmin?: Maybe<Boolean>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioCreateManyWithoutUsuarioInput>;
}

export interface UsuarioSalaUpdateManyWithoutUsuarioInput {
  create?: Maybe<
    | UsuarioSalaCreateWithoutUsuarioInput[]
    | UsuarioSalaCreateWithoutUsuarioInput
  >;
  delete?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
  connect?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
  set?: Maybe<UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput>;
  disconnect?: Maybe<
    UsuarioSalaWhereUniqueInput[] | UsuarioSalaWhereUniqueInput
  >;
  update?: Maybe<
    | UsuarioSalaUpdateWithWhereUniqueWithoutUsuarioInput[]
    | UsuarioSalaUpdateWithWhereUniqueWithoutUsuarioInput
  >;
  upsert?: Maybe<
    | UsuarioSalaUpsertWithWhereUniqueWithoutUsuarioInput[]
    | UsuarioSalaUpsertWithWhereUniqueWithoutUsuarioInput
  >;
  deleteMany?: Maybe<
    UsuarioSalaScalarWhereInput[] | UsuarioSalaScalarWhereInput
  >;
  updateMany?: Maybe<
    | UsuarioSalaUpdateManyWithWhereNestedInput[]
    | UsuarioSalaUpdateManyWithWhereNestedInput
  >;
}

export interface UsuarioSalaUpdateInput {
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  usuario?: Maybe<UsuarioUpdateOneRequiredWithoutUsuariosEnSalaInput>;
  sala?: Maybe<SalaUpdateOneRequiredWithoutUsuariosEnSalaInput>;
}

export interface SalaUpdateWithoutUsuariosEnSalaDataInput {
  nombre?: Maybe<String>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioUpdateManyWithoutSalaInput>;
}

export interface SalaUpdateOneRequiredWithoutUsuariosEnSalaInput {
  create?: Maybe<SalaCreateWithoutUsuariosEnSalaInput>;
  update?: Maybe<SalaUpdateWithoutUsuariosEnSalaDataInput>;
  upsert?: Maybe<SalaUpsertWithoutUsuariosEnSalaInput>;
  connect?: Maybe<SalaWhereUniqueInput>;
}

export interface UsuarioSalaUpdateWithoutUsuarioDataInput {
  levantarMano?: Maybe<Boolean>;
  compartirPantalla?: Maybe<Boolean>;
  sala?: Maybe<SalaUpdateOneRequiredWithoutUsuariosEnSalaInput>;
}

export interface UsuarioSalaUpdateWithWhereUniqueWithoutUsuarioInput {
  where: UsuarioSalaWhereUniqueInput;
  data: UsuarioSalaUpdateWithoutUsuarioDataInput;
}

export interface SalaUpdateInput {
  nombre?: Maybe<String>;
  usuariosEnSala?: Maybe<UsuarioSalaUpdateManyWithoutSalaInput>;
  diagramasPorUsuario?: Maybe<DiagramaUsuarioUpdateManyWithoutSalaInput>;
}

export interface UsuarioSalaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UsuarioSalaWhereInput>;
  AND?: Maybe<
    UsuarioSalaSubscriptionWhereInput[] | UsuarioSalaSubscriptionWhereInput
  >;
  OR?: Maybe<
    UsuarioSalaSubscriptionWhereInput[] | UsuarioSalaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UsuarioSalaSubscriptionWhereInput[] | UsuarioSalaSubscriptionWhereInput
  >;
}

export interface SalaCreateWithoutDiagramasPorUsuarioInput {
  id?: Maybe<ID_Input>;
  nombre: String;
  usuariosEnSala?: Maybe<UsuarioSalaCreateManyWithoutSalaInput>;
}

export interface UsuarioUpsertWithoutDiagramasPorUsuarioInput {
  update: UsuarioUpdateWithoutDiagramasPorUsuarioDataInput;
  create: UsuarioCreateWithoutDiagramasPorUsuarioInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UsuarioSalaPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  levantarMano: Boolean;
  compartirPantalla: Boolean;
}

export interface UsuarioSalaPreviousValuesPromise
  extends Promise<UsuarioSalaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  levantarMano: () => Promise<Boolean>;
  compartirPantalla: () => Promise<Boolean>;
}

export interface UsuarioSalaPreviousValuesSubscription
  extends Promise<AsyncIterator<UsuarioSalaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  levantarMano: () => Promise<AsyncIterator<Boolean>>;
  compartirPantalla: () => Promise<AsyncIterator<Boolean>>;
}

export interface DiagramaUsuarioConnection {
  pageInfo: PageInfo;
  edges: DiagramaUsuarioEdge[];
}

export interface DiagramaUsuarioConnectionPromise
  extends Promise<DiagramaUsuarioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiagramaUsuarioEdge>>() => T;
  aggregate: <T = AggregateDiagramaUsuarioPromise>() => T;
}

export interface DiagramaUsuarioConnectionSubscription
  extends Promise<AsyncIterator<DiagramaUsuarioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiagramaUsuarioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiagramaUsuarioSubscription>() => T;
}

export interface DiagramaUsuario {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DiagramaUsuarioPromise
  extends Promise<DiagramaUsuario>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  diagrama: <T = DiagramaPromise>() => T;
  sala: <T = SalaPromise>() => T;
  usuario: <T = UsuarioPromise>() => T;
}

export interface DiagramaUsuarioSubscription
  extends Promise<AsyncIterator<DiagramaUsuario>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  diagrama: <T = DiagramaSubscription>() => T;
  sala: <T = SalaSubscription>() => T;
  usuario: <T = UsuarioSubscription>() => T;
}

export interface DiagramaUsuarioNullablePromise
  extends Promise<DiagramaUsuario | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  diagrama: <T = DiagramaPromise>() => T;
  sala: <T = SalaPromise>() => T;
  usuario: <T = UsuarioPromise>() => T;
}

export interface DiagramaUsuarioEdge {
  node: DiagramaUsuario;
  cursor: String;
}

export interface DiagramaUsuarioEdgePromise
  extends Promise<DiagramaUsuarioEdge>,
    Fragmentable {
  node: <T = DiagramaUsuarioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiagramaUsuarioEdgeSubscription
  extends Promise<AsyncIterator<DiagramaUsuarioEdge>>,
    Fragmentable {
  node: <T = DiagramaUsuarioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UsuarioSala {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  levantarMano: Boolean;
  compartirPantalla: Boolean;
}

export interface UsuarioSalaPromise extends Promise<UsuarioSala>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  levantarMano: () => Promise<Boolean>;
  compartirPantalla: () => Promise<Boolean>;
  usuario: <T = UsuarioPromise>() => T;
  sala: <T = SalaPromise>() => T;
}

export interface UsuarioSalaSubscription
  extends Promise<AsyncIterator<UsuarioSala>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  levantarMano: () => Promise<AsyncIterator<Boolean>>;
  compartirPantalla: () => Promise<AsyncIterator<Boolean>>;
  usuario: <T = UsuarioSubscription>() => T;
  sala: <T = SalaSubscription>() => T;
}

export interface UsuarioSalaNullablePromise
  extends Promise<UsuarioSala | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  levantarMano: () => Promise<Boolean>;
  compartirPantalla: () => Promise<Boolean>;
  usuario: <T = UsuarioPromise>() => T;
  sala: <T = SalaPromise>() => T;
}

export interface UsuarioSubscriptionPayload {
  mutation: MutationType;
  node: Usuario;
  updatedFields: String[];
  previousValues: UsuarioPreviousValues;
}

export interface UsuarioSubscriptionPayloadPromise
  extends Promise<UsuarioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UsuarioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsuarioPreviousValuesPromise>() => T;
}

export interface UsuarioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsuarioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsuarioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsuarioPreviousValuesSubscription>() => T;
}

export interface AggregateDiagrama {
  count: Int;
}

export interface AggregateDiagramaPromise
  extends Promise<AggregateDiagrama>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiagramaSubscription
  extends Promise<AsyncIterator<AggregateDiagrama>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUsuarioSala {
  count: Int;
}

export interface AggregateUsuarioSalaPromise
  extends Promise<AggregateUsuarioSala>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsuarioSalaSubscription
  extends Promise<AsyncIterator<AggregateUsuarioSala>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsuarioSalaConnection {
  pageInfo: PageInfo;
  edges: UsuarioSalaEdge[];
}

export interface UsuarioSalaConnectionPromise
  extends Promise<UsuarioSalaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UsuarioSalaEdge>>() => T;
  aggregate: <T = AggregateUsuarioSalaPromise>() => T;
}

export interface UsuarioSalaConnectionSubscription
  extends Promise<AsyncIterator<UsuarioSalaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsuarioSalaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsuarioSalaSubscription>() => T;
}

export interface DiagramaEdge {
  node: Diagrama;
  cursor: String;
}

export interface DiagramaEdgePromise
  extends Promise<DiagramaEdge>,
    Fragmentable {
  node: <T = DiagramaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiagramaEdgeSubscription
  extends Promise<AsyncIterator<DiagramaEdge>>,
    Fragmentable {
  node: <T = DiagramaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UsuarioEdge {
  node: Usuario;
  cursor: String;
}

export interface UsuarioEdgePromise extends Promise<UsuarioEdge>, Fragmentable {
  node: <T = UsuarioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UsuarioEdgeSubscription
  extends Promise<AsyncIterator<UsuarioEdge>>,
    Fragmentable {
  node: <T = UsuarioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UsuarioSalaSubscriptionPayload {
  mutation: MutationType;
  node: UsuarioSala;
  updatedFields: String[];
  previousValues: UsuarioSalaPreviousValues;
}

export interface UsuarioSalaSubscriptionPayloadPromise
  extends Promise<UsuarioSalaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UsuarioSalaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsuarioSalaPreviousValuesPromise>() => T;
}

export interface UsuarioSalaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsuarioSalaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsuarioSalaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsuarioSalaPreviousValuesSubscription>() => T;
}

export interface Diagrama {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  datos: String;
}

export interface DiagramaPromise extends Promise<Diagrama>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  datos: () => Promise<String>;
  diagramasPorUsuario: <T = FragmentableArray<DiagramaUsuario>>(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DiagramaSubscription
  extends Promise<AsyncIterator<Diagrama>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  datos: () => Promise<AsyncIterator<String>>;
  diagramasPorUsuario: <
    T = Promise<AsyncIterator<DiagramaUsuarioSubscription>>
  >(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DiagramaNullablePromise
  extends Promise<Diagrama | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  datos: () => Promise<String>;
  diagramasPorUsuario: <T = FragmentableArray<DiagramaUsuario>>(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Sala {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  nombre: String;
}

export interface SalaPromise extends Promise<Sala>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  nombre: () => Promise<String>;
  usuariosEnSala: <T = FragmentableArray<UsuarioSala>>(args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diagramasPorUsuario: <T = FragmentableArray<DiagramaUsuario>>(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SalaSubscription
  extends Promise<AsyncIterator<Sala>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  nombre: () => Promise<AsyncIterator<String>>;
  usuariosEnSala: <T = Promise<AsyncIterator<UsuarioSalaSubscription>>>(args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diagramasPorUsuario: <
    T = Promise<AsyncIterator<DiagramaUsuarioSubscription>>
  >(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SalaNullablePromise
  extends Promise<Sala | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  nombre: () => Promise<String>;
  usuariosEnSala: <T = FragmentableArray<UsuarioSala>>(args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diagramasPorUsuario: <T = FragmentableArray<DiagramaUsuario>>(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DiagramaSubscriptionPayload {
  mutation: MutationType;
  node: Diagrama;
  updatedFields: String[];
  previousValues: DiagramaPreviousValues;
}

export interface DiagramaSubscriptionPayloadPromise
  extends Promise<DiagramaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiagramaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiagramaPreviousValuesPromise>() => T;
}

export interface DiagramaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiagramaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiagramaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiagramaPreviousValuesSubscription>() => T;
}

export interface SalaEdge {
  node: Sala;
  cursor: String;
}

export interface SalaEdgePromise extends Promise<SalaEdge>, Fragmentable {
  node: <T = SalaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SalaEdgeSubscription
  extends Promise<AsyncIterator<SalaEdge>>,
    Fragmentable {
  node: <T = SalaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DiagramaPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  datos: String;
}

export interface DiagramaPreviousValuesPromise
  extends Promise<DiagramaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  datos: () => Promise<String>;
}

export interface DiagramaPreviousValuesSubscription
  extends Promise<AsyncIterator<DiagramaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  datos: () => Promise<AsyncIterator<String>>;
}

export interface UsuarioPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  nombre: String;
  esAdmin: Boolean;
}

export interface UsuarioPreviousValuesPromise
  extends Promise<UsuarioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  nombre: () => Promise<String>;
  esAdmin: () => Promise<Boolean>;
}

export interface UsuarioPreviousValuesSubscription
  extends Promise<AsyncIterator<UsuarioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  nombre: () => Promise<AsyncIterator<String>>;
  esAdmin: () => Promise<AsyncIterator<Boolean>>;
}

export interface DiagramaConnection {
  pageInfo: PageInfo;
  edges: DiagramaEdge[];
}

export interface DiagramaConnectionPromise
  extends Promise<DiagramaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiagramaEdge>>() => T;
  aggregate: <T = AggregateDiagramaPromise>() => T;
}

export interface DiagramaConnectionSubscription
  extends Promise<AsyncIterator<DiagramaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiagramaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiagramaSubscription>() => T;
}

export interface UsuarioSalaEdge {
  node: UsuarioSala;
  cursor: String;
}

export interface UsuarioSalaEdgePromise
  extends Promise<UsuarioSalaEdge>,
    Fragmentable {
  node: <T = UsuarioSalaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UsuarioSalaEdgeSubscription
  extends Promise<AsyncIterator<UsuarioSalaEdge>>,
    Fragmentable {
  node: <T = UsuarioSalaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DiagramaUsuarioSubscriptionPayload {
  mutation: MutationType;
  node: DiagramaUsuario;
  updatedFields: String[];
  previousValues: DiagramaUsuarioPreviousValues;
}

export interface DiagramaUsuarioSubscriptionPayloadPromise
  extends Promise<DiagramaUsuarioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiagramaUsuarioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiagramaUsuarioPreviousValuesPromise>() => T;
}

export interface DiagramaUsuarioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiagramaUsuarioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiagramaUsuarioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiagramaUsuarioPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateSala {
  count: Int;
}

export interface AggregateSalaPromise
  extends Promise<AggregateSala>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSalaSubscription
  extends Promise<AsyncIterator<AggregateSala>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SalaPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  nombre: String;
}

export interface SalaPreviousValuesPromise
  extends Promise<SalaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  nombre: () => Promise<String>;
}

export interface SalaPreviousValuesSubscription
  extends Promise<AsyncIterator<SalaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  nombre: () => Promise<AsyncIterator<String>>;
}

export interface SalaSubscriptionPayload {
  mutation: MutationType;
  node: Sala;
  updatedFields: String[];
  previousValues: SalaPreviousValues;
}

export interface SalaSubscriptionPayloadPromise
  extends Promise<SalaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SalaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SalaPreviousValuesPromise>() => T;
}

export interface SalaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SalaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SalaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SalaPreviousValuesSubscription>() => T;
}

export interface Usuario {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  nombre: String;
  esAdmin: Boolean;
}

export interface UsuarioPromise extends Promise<Usuario>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  nombre: () => Promise<String>;
  esAdmin: () => Promise<Boolean>;
  usuariosEnSala: <T = FragmentableArray<UsuarioSala>>(args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diagramasPorUsuario: <T = FragmentableArray<DiagramaUsuario>>(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UsuarioSubscription
  extends Promise<AsyncIterator<Usuario>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  nombre: () => Promise<AsyncIterator<String>>;
  esAdmin: () => Promise<AsyncIterator<Boolean>>;
  usuariosEnSala: <T = Promise<AsyncIterator<UsuarioSalaSubscription>>>(args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diagramasPorUsuario: <
    T = Promise<AsyncIterator<DiagramaUsuarioSubscription>>
  >(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UsuarioNullablePromise
  extends Promise<Usuario | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  nombre: () => Promise<String>;
  esAdmin: () => Promise<Boolean>;
  usuariosEnSala: <T = FragmentableArray<UsuarioSala>>(args?: {
    where?: UsuarioSalaWhereInput;
    orderBy?: UsuarioSalaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diagramasPorUsuario: <T = FragmentableArray<DiagramaUsuario>>(args?: {
    where?: DiagramaUsuarioWhereInput;
    orderBy?: DiagramaUsuarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DiagramaUsuarioPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DiagramaUsuarioPreviousValuesPromise
  extends Promise<DiagramaUsuarioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DiagramaUsuarioPreviousValuesSubscription
  extends Promise<AsyncIterator<DiagramaUsuarioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SalaConnection {
  pageInfo: PageInfo;
  edges: SalaEdge[];
}

export interface SalaConnectionPromise
  extends Promise<SalaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SalaEdge>>() => T;
  aggregate: <T = AggregateSalaPromise>() => T;
}

export interface SalaConnectionSubscription
  extends Promise<AsyncIterator<SalaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SalaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSalaSubscription>() => T;
}

export interface UsuarioConnection {
  pageInfo: PageInfo;
  edges: UsuarioEdge[];
}

export interface UsuarioConnectionPromise
  extends Promise<UsuarioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UsuarioEdge>>() => T;
  aggregate: <T = AggregateUsuarioPromise>() => T;
}

export interface UsuarioConnectionSubscription
  extends Promise<AsyncIterator<UsuarioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsuarioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsuarioSubscription>() => T;
}

export interface AggregateUsuario {
  count: Int;
}

export interface AggregateUsuarioPromise
  extends Promise<AggregateUsuario>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsuarioSubscription
  extends Promise<AsyncIterator<AggregateUsuario>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateDiagramaUsuario {
  count: Int;
}

export interface AggregateDiagramaUsuarioPromise
  extends Promise<AggregateDiagramaUsuario>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiagramaUsuarioSubscription
  extends Promise<AsyncIterator<AggregateDiagramaUsuario>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UsuarioSala",
    embedded: false
  },
  {
    name: "Sala",
    embedded: false
  },
  {
    name: "Usuario",
    embedded: false
  },
  {
    name: "Diagrama",
    embedded: false
  },
  {
    name: "DiagramaUsuario",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://sala-reunion-c09c320c32.herokuapp.com/sala-reunion-puzzle/dev`
});
export const prisma = new Prisma();
